{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filterTitle","showSelectOfTodos","selectTodos","handleChange","event","target","name","value","setState","todos","this","props","selectUser","randomize","checkOnCompletedTodos","filter","todo","completed","title","toLowerCase","includes","className","type","placeholder","onChange","htmlFor","map","key","onClick","id","checked","readOnly","userId","React","Component","defaultProps","request","url","fetch","then","response","json","CurrentUser","user","loadUser","prevState","selectedUserId","data","email","phone","App","sort","Math","random","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0597f09.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    filterTitle: '',\n    showSelectOfTodos: [`active`, `completed`],\n    selectTodos: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    let { todos } = this.props;\n    const { selectUser, randomize, checkOnCompletedTodos } = this.props;\n    const { filterTitle, selectTodos, showSelectOfTodos } = this.state;\n\n    todos = todos.filter(\n      (todo) => {\n        switch (selectTodos) {\n          case `active`:\n            return !todo.completed;\n          case `completed`:\n            return todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ).filter(todo => todo.title.toLowerCase()\n      .includes(this.state.filterTitle.toLowerCase()));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"App__input\">\n          <label className=\"filterByTitle\">\n            <input\n              className=\"filterByTitle\"\n              type=\"text\"\n              name=\"filterTitle\"\n              placeholder=\"put name of todo\"\n              value={filterTitle}\n              onChange={this.handleChange}\n            />\n            <span className=\"bar\" />\n          </label>\n\n        </div>\n        <div className=\"App__select\">\n\n          <label htmlFor=\"complite\">\n            Filter todos by select methods\n          </label>\n          <select\n            name=\"selectTodos\"\n            value={selectTodos}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">\n              all\n            </option>\n            {showSelectOfTodos.map(todo => (\n              <option\n                key={todo}\n                value={todo}\n              >\n                {todo}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"App__randomize\">\n          <button\n            className=\"randomize\"\n            type=\"button\"\n            onClick={() => randomize()}\n          >\n            Randomize\n          </button>\n        </div>\n        <ul>\n          {todos.map(todo => (\n            todo.completed ? (\n              <li\n                key={todo.id}\n                className=\"TodoList__item TodoList__item--checked\"\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => checkOnCompletedTodos(todo.id)}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ) : (\n              <li\n                key={todo.id}\n                className=\"TodoList__item TodoList__item--unchecked\"\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => checkOnCompletedTodos(todo.id)}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            )\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  randomize: PropTypes.func.isRequired,\n  checkOnCompletedTodos: PropTypes.func.isRequired,\n\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${API_URL}${url}`)\n  .then(response => response.json());\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser() {\n    getUser(this.props.selectedUserId).then((data) => {\n      this.setState({ user: { ...data.data } });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user:${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"randomize\"\n          type=\"button\"\n          onClick={() => selectUser(0)}\n        >\n          Clear user details!\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then((data) => {\n      this.setState({ todos: data.data });\n    });\n  }\n\n  selectedUserId = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort(() => 0.5 - Math.random()),\n    }));\n  }\n\n  checkOnCompletedTodos = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectedUserId}\n            randomize={this.randomize}\n            checkOnCompletedTodos={this.checkOnCompletedTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={this.selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}