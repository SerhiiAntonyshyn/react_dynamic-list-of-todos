{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","data","selectedData","filter","checkOnCompletedTodos","chooseUserId","randomize","todos","useState","filterTitle","setFilterTitle","selectTodos","setSelectTodos","className","type","name","placeholder","value","onChange","event","target","htmlFor","map","todo","key","onClick","console","log","completed","title","toLowerCase","includes","id","classNames","checked","readOnly","userId","defaultProps","API_URL","getTodos","a","fetch","then","promise","json","result","getUser","user","CurrentUser","selectedUserId","setUser","useEffect","fetchUser","email","phone","App","setTodos","setSelectedUserId","fetchTodos","sort","Math","random","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91dc522d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoList = ({\n  checkOnCompletedTodos,\n  chooseUserId,\n  randomize,\n  todos,\n}) => {\n  const [filterTitle, setFilterTitle] = useState('');\n  const selectOfTodos = [`active`, `completed`];\n  const [selectTodos, setSelectTodos] = useState('');\n\n  const getFilteresTodos = (data, selectedData, filter) => {\n    console.log(filter);\n    let array = data.filter(\n      (todo) => {\n        switch (selectedData) {\n          case `active`:\n            return !todo.completed;\n          case `completed`:\n            return todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ).filter(todo => todo.title !== null && todo.title.toLowerCase()\n      .includes(filter.toLowerCase()));\n\n    return array;\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"App__input\">\n        <label className=\"filterByTitle\">\n          <input\n            className=\"filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            value={filterTitle}\n            onChange={event => setFilterTitle(event.target.value)}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n      <div className=\"App__select\">\n\n        <label htmlFor=\"complite\">\n          Filter todos by select methods\n        </label>\n        <select\n          name=\"selectTodos\"\n          value={selectTodos}\n          onChange={event => setSelectTodos(event.target.value)}\n        >\n          <option value=\"all\">\n            all\n          </option>\n          {selectOfTodos.map(todo => (\n            <option\n              key={todo}\n              value={todo}\n            >\n              {todo}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"App__randomize\">\n        <button\n          className=\"randomize\"\n          type=\"button\"\n          onClick={() => randomize()}\n        >\n          User&nbsp;#2\n          Randomize\n        </button>\n\n      </div>\n      <ul>\n\n        {getFilteresTodos(todos, selectTodos, filterTitle).map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked',\n            )}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => checkOnCompletedTodos(todo.id)}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            {todo.completed\n              ? (\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n              : (\n                <button\n                  className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                  type=\"button\"\n                  onClick={() => chooseUserId(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  chooseUserId: PropTypes.func.isRequired,\n  randomize: PropTypes.func.isRequired,\n  checkOnCompletedTodos: PropTypes.func.isRequired,\n\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = async() => {\n  const todos = fetch(`${API_URL}/todos`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return todos;\n};\n\nexport const getUser = async(userId) => {\n  const user = fetch(`${API_URL}/users/${userId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return user;\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api/api';\n\nexport const CurrentUser = ({ selectedUserId, chooseUserId }) => {\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    const fetchUser = async() => {\n      const result = await getUser(selectedUserId);\n\n      setUser(result);\n    };\n\n    fetchUser();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user !== null\n        ? (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user:${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              className=\"randomize\"\n              type=\"button\"\n              onClick={() => chooseUserId(0)}\n            >\n              Clear user details!\n            </button>\n          </>\n        )\n        : 'We do not have information about this user'}\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  chooseUserId: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    const fetchTodos = async() => {\n      const result = await getTodos();\n\n      setTodos(result);\n    };\n\n    fetchTodos();\n  }, [selectedUserId]);\n\n  const chooseUserId = (userId) => {\n    setSelectedUserId(userId);\n  };\n\n  const randomize = () => {\n    setTodos([...todos].sort(() => 0.5 - Math.random()));\n  };\n\n  const checkOnCompletedTodos = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          chooseUserId={chooseUserId}\n          randomize={randomize}\n          checkOnCompletedTodos={checkOnCompletedTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              chooseUserId={chooseUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}