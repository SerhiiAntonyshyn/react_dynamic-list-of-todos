{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filterTitle","showSelectOfTodos","selectTodos","getFilteresTodos","todos","filter","todo","completed","title","toLowerCase","includes","handleChange","event","target","name","value","setState","this","props","selectUser","randomize","checkOnCompletedTodos","className","type","placeholder","onChange","htmlFor","map","key","onClick","id","classNames","checked","readOnly","userId","React","Component","defaultProps","request","url","fetch","then","response","json","CurrentUser","user","loadUser","prevState","selectedUserId","data","email","phone","App","sort","Math","random","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04c7b152.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    filterTitle: '',\n    showSelectOfTodos: [`active`, `completed`],\n    selectTodos: '',\n  }\n\n  getFilteresTodos = (todos, selectTodos, filterTitle) => {\n    const array = todos.filter(\n      (todo) => {\n        switch (selectTodos) {\n          case `active`:\n            return !todo.completed;\n          case `completed`:\n            return todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ).filter(todo => todo.title.toLowerCase()\n      .includes(filterTitle.toLowerCase()));\n\n    return array;\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const { todos, selectUser, randomize, checkOnCompletedTodos } = this.props;\n    const { filterTitle, selectTodos, showSelectOfTodos } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"App__input\">\n          <label className=\"filterByTitle\">\n            <input\n              className=\"filterByTitle\"\n              type=\"text\"\n              name=\"filterTitle\"\n              placeholder=\"put name of todo\"\n              value={filterTitle}\n              onChange={this.handleChange}\n            />\n            <span className=\"bar\" />\n          </label>\n\n        </div>\n        <div className=\"App__select\">\n\n          <label htmlFor=\"complite\">\n            Filter todos by select methods\n          </label>\n          <select\n            name=\"selectTodos\"\n            value={selectTodos}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">\n              all\n            </option>\n            {showSelectOfTodos.map(todo => (\n              <option\n                key={todo}\n                value={todo}\n              >\n                {todo}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"App__randomize\">\n          <button\n            className=\"randomize\"\n            type=\"button\"\n            onClick={() => randomize()}\n          >\n            Randomize\n          </button>\n        </div>\n        <ul>\n          {this.getFilteresTodos(todos, selectTodos, filterTitle).map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                todo.completed\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked',\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  onChange={() => checkOnCompletedTodos(todo.id)}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n              {todo.completed\n                ? (\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                )\n                : (\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                )\n              }\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  randomize: PropTypes.func.isRequired,\n  checkOnCompletedTodos: PropTypes.func.isRequired,\n\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${API_URL}${url}`)\n  .then(response => response.json());\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser() {\n    getUser(this.props.selectedUserId).then((data) => {\n      this.setState({ user: { ...data.data } });\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { selectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user:${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"randomize\"\n          type=\"button\"\n          onClick={() => selectUser(0)}\n        >\n          Clear user details!\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then((data) => {\n      this.setState({ todos: data.data });\n    });\n  }\n\n  selectedUserId = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].sort(() => 0.5 - Math.random()),\n    }));\n  }\n\n  checkOnCompletedTodos = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectedUserId}\n            randomize={this.randomize}\n            checkOnCompletedTodos={this.checkOnCompletedTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                selectUser={this.selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}